// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// FeedItem defines model for FeedItem.
type FeedItem struct {
	Body     string `json:"body"`
	Breaking bool   `json:"breaking"`
	Id       int    `json:"id"`
	Title    string `json:"title"`
}

// PostNewsJSONBody defines parameters for PostNews.
type PostNewsJSONBody struct {
	Body     string `json:"body"`
	Breaking bool   `json:"breaking"`
	Title    string `json:"title"`
}

// PostNewsJSONRequestBody defines body for PostNews for application/json ContentType.
type PostNewsJSONRequestBody PostNewsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /news)
	GetNews(c *gin.Context)

	// (POST /news)
	PostNews(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetNews operation middleware
func (siw *ServerInterfaceWrapper) GetNews(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNews(c)
}

// PostNews operation middleware
func (siw *ServerInterfaceWrapper) PostNews(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostNews(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/news", wrapper.GetNews)
	router.POST(options.BaseURL+"/news", wrapper.PostNews)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RSTWsbMRD9K2La45J1+nHZW1PaYigh0GPpQd59dpSsNcpoEmPC/vcykh07xIcECj1p",
	"kOY9vXlvHqnndeKIqJm6R8r9Nda+lN+BYa5YW52EE0QDysuCh62duk2gjrJKiCuaGloI/K3Vh8cF8wgf",
	"7TUMR/chKlYQu9egI07wTQ0J7u6DYKDut8H3vU2VcPThn2aP5sUNeqXJ4CEuuRDXH+gSm+wuoRuWW/fl",
	"ak4NPUBy4EgdnZ/NzmamhxOiT4E6+liuGkper8vkbcSmFCuoHQNyLyFpZfgBdaNXZHXW55aAaTbrvLXM",
	"h9pkMsiGy4ljrp5+mM3s6DkqYuH2KY2hL8D2JtsH+3isCop1Ab4XLKmjd+0hyHaXYvsU4fRkjxfx2+rO",
	"c/E/Q1bHy+MBDPa56nreO48KiX50vyAPEPdNhKWSJs4nnPkq8ArnjdaZ9Be2XHE++HJ3j6wXuy17tSX/",
	"ZElfuYxv2cPpRdTn/zdq63Mhu76kMhjk06mYL/zgdmG8fRWmafobAAD//37ETihdBAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
